version: v1beta
variable:
  audio:
    title: Audio File
    type: audio
component:
  audio-vad:
    type: audio
    input:
      audio: ${variable.audio}
      min-silence-duration: 2000
      speech-pad: 500
    task: TASK_DETECT_ACTIVITY
  audio-segmentation:
    type: audio
    input:
      audio: ${variable.audio}
      segments: ${audio-vad.output.segments}
    task: TASK_SEGMENT
  process-segments:
    type: iterator
    range:
      start: 0
      stop: ${audio-segmentation.output.audio-segments:length}
    component:
      transcribe-segment:
        type: openai
        task: TASK_SPEECH_RECOGNITION
        input:
          model: whisper-1
          audio: ${audio-segmentation.output.audio-segments[i]}
          temperature: 0
        setup:
          api-key: ${secret.openai}
      process-transcription-segment:
        type: openai
        task: TASK_TEXT_GENERATION
        input:
          model: gpt-4o-mini
          n: 1
          prompt: |-
            Enhance the provided audio transcription generated by an AI model.

            **Audio Transcription**:
            ```
            ${transcribe-segment.output.text}
            ```

            **Time Stamp**:
            ```
            ${audio-vad.output.segments[i]} seconds
            ```

            Output and return the Markdown-formatted enhanced transcript directly, without additional explanations:
          response-format:
            type: text
          system-message: "You are an expert transcription assistant specializing in refining AI-generated audio transcriptions. Follow these step-by-step instructions to ensure the output is accurate, consistent, and well-formatted:\n\n1. **Analyze the Input**: Start by carefully reviewing the provided transcription and associated timestamp.\n\n2. **Eliminate Duplications**: Identify and remove any repeated words or phrases that may result from hallucinations.\n\n3. **Translate Non-English Text**: If any part of the transcription is not in English, accurately translate it into English while preserving its original meaning and context.\n\n4. **Apply Punctuation**: Add appropriate punctuation to ensure the transcription is grammatically correct and easy to read.\n\n5. **Ensure Complete Timestamps**: \n    - Include both the start and end times for each transcription segment. \n    - Format the timestamp as a markdown sub-heading: `### Timestamp: <start time> - <end time> seconds`.\n    - Ensure the time units (`seconds`) are explicitly stated.\n\n6. **Match Text with Timestamps**:\n    - Ensure that the timestamp sub-heading is followed by its corresponding transcription text.\n    - If a segment is empty or nonsensical, clearly mark it as `[No transcription available]` instead of leaving it blank.\n    - If the segment only contains a single word that is not very useful (e.g. \"you\"), clearly mark it as `[No transcription available]`.\n\n7. **Format in Markdown**: Structure the final transcription using Markdown:\n    - Use `###` for the timestamp heading.\n    - Ensure consistent formatting across all sections.\n\n8. **Check for Completeness**: Verify that:\n    - The corresponding text.\n    - The transcription is in English.\n    - The output is free of duplicated or empty segments.\n\nApproach each task step by step, reasoning carefully before proceeding to the next. Your goal is to produce a professional, accurate transcription in Markdown format that is easy to read and consistent."
          temperature: 0
          top-p: 1
        setup:
          api-key: ${secret.openai}
    output-elements:
      result: ${process-transcription-segment.output.texts[0]}
  merge-segment-transcripts:
    type: json
    input:
      json-value: ${process-segments.output.result}
      jq-filter: join("\n\n")
    task: TASK_JQ
output:
  transcript:
    title: Transcribed Text
    value: ${merge-segment-transcripts.output.results[0]}