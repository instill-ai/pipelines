version: v1beta

variable:
  # https://docs.google.com/spreadsheets/d/.../edit?usp=sharing
  sheet-shared-link:
    title: Sheets Link
    description: The shared link to the Google Sheets document where data will be written
    type: string
    instill-ui-order: 1
  sheet-name:
    title: Sheet Name
    description: The name of the specific sheet/tab in the Google Sheets document
    type: string
    instill-ui-order: 2
  bank-statement:
    title: Bank Statement
    description: Upload a single bank statement (PDF, CSV, etc.) to extract structured financial data
    type: file
    instill-ui-order: 3

component:
  # Step 1: Convert document to text/markdown
  statement-to-text:
    type: document
    task: TASK_CONVERT_TO_MARKDOWN
    input:
      document: ${variable.bank-statement}
      converter: docling

  # Step 2: Extract structured financial data using JSON schema (EXCLUDING dailyEndBalances)
  extract-financial-data:
    type: openai
    task: TASK_TEXT_GENERATION
    input:
      model: gpt-4o
      prompt: |-
        Extract key financial information from this bank statement in a structured format.

        **CRITICAL: DO NOT make up, infer, or guess any information that is not explicitly stated in the statement. Only extract information that is clearly present in the document.**

        **Extraction Requirements:**
        Extract the following information accurately:
        1. **month** - Statement period in format (mmm-yyyy)
        2. **monthEndBalance** - Closing balance for the statement period (number)
        3. **bank** - Name of the financial institution (string)
        4. **currency** - Currency code in ISO 4217 format (e.g., USD, EUR, GBP, CAD, AUD, JPY, etc.)
        5. **listOfDebitTransactions** - Array of all debit/withdrawal transactions with date, description, and amount
        6. **listOfCreditTransactions** - Array of all credit/deposit transactions with date, description, and amount

        **Important Notes:**
        - Ensure all numerical values are extracted as numbers, not strings
        - For month format, use mmm-yyyy (e.g., "Aug-2025" for August 2025) - 3-letter month abbreviation + 4-digit year
        - For currency, use standard ISO 4217 currency codes (USD, EUR, GBP, CAD, AUD, JPY, etc.) - exactly 3 uppercase letters
        - If multiple currencies are present, use the primary currency of the account
        - Ensure all calculations are accurate and complete
        - If any information is not available in the statement, use null for that field

        **Bank Statement Content:**
        ${statement-to-text.output.body}
      response-format:
        json-schema: |
          {
              "name": "bank_statement_data",
              "strict": true,
              "schema": {
                  "type": "object",
                  "properties": {
                      "month": {
                          "type": ["string", "null"],
                          "description": "Statement period in mmm-yyyy format (e.g., 'Aug-2025') or null if not available"
                      },

                      "monthEndBalance": {
                          "type": ["number", "null"],
                          "description": "Closing balance at the end of the statement period or null if not available"
                      },
                      "bank": {
                          "type": ["string", "null"],
                          "description": "Name of the financial institution or null if not available"
                      },
                      "currency": {
                          "type": ["string", "null"],
                          "description": "Currency code in ISO 4217 format (e.g., USD, EUR, GBP, CAD, AUD, JPY) or null if not available"
                      },
                      "listOfDebitTransactions": {
                          "type": "array",
                          "description": "Array of all debit/withdrawal transactions with date, description, and amount",
                          "items": {
                              "type": "object",
                              "properties": {
                                  "date": {
                                      "type": ["string", "null"],
                                      "description": "Transaction date in YYYY-MM-DD format or null if not available"
                                  },
                                  "description": {
                                      "type": ["string", "null"],
                                      "description": "Transaction description or merchant name or null if not available"
                                  },
                                  "amount": {
                                      "type": "number",
                                      "description": "Transaction amount (positive number)"
                                  }
                              },
                              "required": ["date", "description", "amount"],
                              "additionalProperties": false
                          }
                      },
                      "listOfCreditTransactions": {
                          "type": "array",
                          "description": "Array of all credit/deposit transactions with date, description, and amount",
                          "items": {
                              "type": "object",
                              "properties": {
                                  "date": {
                                      "type": ["string", "null"],
                                      "description": "Transaction date in YYYY-MM-DD format or null if not available"
                                  },
                                  "description": {
                                      "type": ["string", "null"],
                                      "description": "Transaction description or merchant name or null if not available"
                                  },
                                  "amount": {
                                      "type": "number",
                                      "description": "Transaction amount (positive number)"
                                  }
                              },
                              "required": ["date", "description", "amount"],
                              "additionalProperties": false
                          }
                      }
                  },
                  "required": [
                      "month",
                      "monthEndBalance",
                      "bank",
                      "currency",
                      "listOfDebitTransactions",
                      "listOfCreditTransactions"
                  ],
                  "additionalProperties": false
              }
          }
        type: json_schema
      system-message: |-
        You are a financial data extraction specialist with expertise in bank statement analysis. Your role is to accurately extract structured financial data from bank statements.

        **Key Responsibilities:**
        1. **Accuracy:** Ensure all numerical data is extracted correctly
        2. **Completeness:** Extract all required fields from the statement
        3. **Format Compliance:** Follow the specified format requirements exactly
        4. **Currency Standards:** Use proper ISO 4217 currency codes
        5. **Date Formatting:** Use mmm-yyyy format for statement periods
        6. **Factual Extraction:** Only extract information explicitly stated in the document

        **Data Quality Standards:**
        - Verify all calculations are mathematically correct
        - Ensure currency codes follow ISO 4217 standard format (exactly 3 uppercase letters)
        - Double-check month format is mmm-yyyy (Aug-2025, not August-2025)
        - Confirm all required fields are present and valid
        - Use null for any fields where information is not available in the statement
        - Never infer or assume information not explicitly stated in the document
        - Only extract factual data that is clearly visible in the statement
        - For transaction lists: extract all individual transactions with date, description, and amount
        - Transaction dates should be in YYYY-MM-DD format
        - Transaction amounts should be positive numbers (absolute values)
        - Include all transactions visible in the statement period
      temperature: 0.1
      top-p: 0.1

  # Step 3: Convert JSON response to structured data
  data-to-json:
    type: json
    task: TASK_UNMARSHAL
    input:
      string: ${extract-financial-data.output.texts[0]}

  # Step 4: Calculate daily end balances using reasoning (text output)
  calculate-daily-balances:
    type: openai
    task: TASK_TEXT_GENERATION
    input:
      model: gpt-4o
      prompt: |-
        You are a financial analyst tasked with calculating daily end balances from bank statement transactions.

        **BANK STATEMENT CONTENT:**
        ${statement-to-text.output.body}

        **EXTRACTED TRANSACTION DATA:**
        ${data-to-json.output.json}

        **CRITICAL DAILY BALANCE CALCULATION RULES:**
        
        **CASH FLOW CONSISTENCY PRINCIPLE:**
        - The balance shown for any date is ALWAYS the balance AFTER all transactions on that date
        - The starting balance of any day MUST equal the ending balance of the previous day
        - This creates a continuous cash flow across consecutive days
        
        **STEP-BY-STEP ALGORITHM (FOLLOW EXACTLY):**
        
        1. **IDENTIFY KNOWN BALANCES**: Find all transaction dates with their resulting balances from the statement
        
        2. **SORT TRANSACTIONS**: Sort all transactions by date (earliest to latest)
        
        3. **CALCULATE BOTH START AND END BALANCES FOR EACH DAY**:
           - For each day, calculate both the STARTING balance and ENDING balance
           - Starting balance = Previous day's ending balance
           - Ending balance = Starting balance ± all transactions on that day
           - For transaction dates: the balance shown is the ENDING balance (verify this matches your calculation)
        
        4. **HANDLE MULTIPLE TRANSACTIONS PER DAY**:
           - For days with multiple transactions, process them in chronological order
           - Starting balance = Previous day's ending balance
           - After each transaction: New balance = Current balance ± Transaction amount
           - Final balance should match the balance shown in the statement
        
        5. **FILL IN GAPS BETWEEN TRANSACTION DATES**:
           - For days without transactions: Start balance = Previous day's end balance, End balance = Start balance
           - This maintains cash flow consistency
        
        6. **VALIDATE CONSISTENCY DURING CALCULATION**:
           - As you calculate each day, verify that the ending balance flows correctly to the next day's starting balance
           - If there's a mismatch, investigate the transactions and recalculate
           - The ending balance of any day MUST equal the starting balance of the next day
        
        **EXAMPLE WITH MULTIPLE SCENARIOS**:
        
        Scenario A - Single transaction:
        - 2025-04-25: $50 debit, resulting balance = $1000
        - 2025-04-25: Start balance = $1050 (from previous day), End balance = $1000 (after $50 debit)
        - 2025-04-26: Start balance = $1000 (from 2025-04-25 end balance)
        
        Scenario B - Multiple transactions on one day:
        - 2025-04-25: $50 debit, then $200 credit, final balance = $1000
        - 2025-04-25: Start balance = $850, After $50 debit = $800, After $200 credit = $1000
        - 2025-04-26: Start balance = $1000 (from 2025-04-25 end balance)
        
        Scenario C - Sparse transactions with start/end balance calculation:
        - 2025-04-20: Start balance = $600, $200 credit, End balance = $800
        - 2025-04-21: Start balance = $800, No transactions, End balance = $800
        - 2025-04-22: Start balance = $800, No transactions, End balance = $800
        - 2025-04-23: Start balance = $800, No transactions, End balance = $800
        - 2025-04-24: Start balance = $800, No transactions, End balance = $800
        - 2025-04-25: Start balance = $800, $50 debit, End balance = $750
        - 2025-04-26: Start balance = $750, No transactions, End balance = $750
        - 2025-04-30: Start balance = $750, $100 debit, End balance = $650
        
        Scenario D - Mixed sparse and multiple transactions:
        - 2025-04-15: Start balance = $1000, $50 debit, End balance = $950
        - 2025-04-16: Start balance = $950, No transactions, End balance = $950
        - 2025-04-17: Start balance = $950, No transactions, End balance = $950
        - 2025-04-18: Start balance = $950, $100 debit + $200 credit + $25 debit, End balance = $1025
        - 2025-04-19: Start balance = $1025, No transactions, End balance = $1025
        - 2025-04-20: Start balance = $1025, $300 credit, End balance = $1325
        - 2025-04-21: Start balance = $1325, No transactions, End balance = $1325
        - 2025-04-22: Start balance = $1325, $75 debit + $150 debit, End balance = $1100
        
        Scenario E - Complex real-world pattern:
        - 2025-04-01: Start balance = $5000, $200 debit + $1000 credit + $50 debit, End balance = $5750
        - 2025-04-02: Start balance = $5750, No transactions, End balance = $5750
        - 2025-04-03: Start balance = $5750, $300 debit, End balance = $5450
        - 2025-04-04: Start balance = $5450, No transactions, End balance = $5450
        - 2025-04-05: Start balance = $5450, $150 debit + $500 credit + $75 debit + $200 debit, End balance = $5525
        - 2025-04-06: Start balance = $5525, No transactions, End balance = $5525
        - 2025-04-07: Start balance = $5525, $1000 debit, End balance = $4525
        - 2025-04-08: Start balance = $4525, $250 credit, End balance = $4775
        - 2025-04-09: Start balance = $4775, No transactions, End balance = $4775
        - 2025-04-10: Start balance = $4775, $125 debit + $300 debit + $400 credit, End balance = $4750

        **CONSISTENCY VALIDATION:**
        - Each day's end balance flows to the next day's start balance
        - If there's a mismatch, investigate the transactions
        - This approach catches errors during calculation, not after
        
        **CRITICAL**: The balance shown for any date is the END balance for that day. Maintain cash flow consistency across consecutive days.

        **YOUR TASK:**
        Analyze the bank statement and extracted transaction data above. Follow the step-by-step algorithm to calculate daily end balances for each day of the statement period.

        **CRITICAL REMINDERS:**
        - Calculate BOTH start and end balances for each day
        - Starting balance = Previous day's ending balance
        - Ending balance = Starting balance ± all transactions on that day
        - The balance shown in the statement is the ENDING balance (verify this matches your calculation)
        - If there's a mismatch between your calculated end balance and the statement balance, investigate

        Provide your reasoning step by step, showing:
        1. For each day: Calculate start balance, process transactions, calculate end balance
        2. Verify that each calculated end balance matches the statement balance
        3. Ensure each day's end balance flows to the next day's start balance
        4. If any inconsistencies are found, investigate and resolve them
        5. The final list of daily end balances for each day of the statement period

        Format your final answer as a clear list of daily end balances with dates and amounts.
      temperature: 0.1
      top-p: 0.1

  # Step 5: Format daily balances into structured JSON
  format-daily-balances:
    type: openai
    task: TASK_TEXT_GENERATION
    input:
      model: gpt-4o
      prompt: |-
        Convert the daily balance calculation results into a structured JSON format.

        **DAILY BALANCE CALCULATION RESULTS:**
        ${calculate-daily-balances.output.texts[0]}

        **REQUIRED JSON FORMAT:**
        Create a JSON object with a "dailyEndBalances" array containing objects with "date" and "balance" fields.

        Each object should have:
        - "date": Date in YYYY-MM-DD format
        - "balance": Account balance at the end of this day (number)

        Example format:
        {
          "dailyEndBalances": [
            {"date": "2025-04-01", "balance": 1000.00},
            {"date": "2025-04-02", "balance": 1000.00},
            {"date": "2025-04-03", "balance": 950.00},
            ...
          ]
        }

        Extract all daily end balances from the calculation results and format them as a valid JSON object.
      response-format:
        json-schema: |
          {
            "name": "daily_balances_data",
            "strict": true,
            "schema": {
              "type": "object",
              "properties": {
                "dailyEndBalances": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "date": {"type": "string"},
                      "balance": {"type": "number"}
                    },
                    "required": ["date", "balance"],
                    "additionalProperties": false
                  }
                }
              },
              "required": ["dailyEndBalances"],
              "additionalProperties": false
            }
          }
        type: json_schema
      temperature: 0.1
      top-p: 0.1

  # Step 6: Convert daily balances JSON to structured data
  daily-balances-to-json:
    type: json
    task: TASK_UNMARSHAL
    input:
      string: ${format-daily-balances.output.texts[0]}

  # Step 7: Merge data and add computed fields
  merge-and-compute:
    type: json
    task: TASK_JQ
    input:
      json-value: ${data-to-json.output.json}
      jq-filter: |
        # First merge the daily balances
        . + {"dailyEndBalances": (${daily-balances-to-json.output.json} | .dailyEndBalances // [])}
        # Then add computed fields
        | (.listOfDebitTransactions  // []) as $debits
        | (.listOfCreditTransactions // []) as $credits
        | (.dailyEndBalances // [])  as $balances
        | . + {
            noOfDebitTransactions: ($debits | length),
            noOfCreditTransactions: ($credits | length),
            totalDebits: ($debits  | map(.amount) | add // 0),
            totalCredits: ($credits | map(.amount) | add // 0),
            avgMonthlyDebit: (
              ($debits | length) as $n
              | if $n > 0 then (($debits | map(.amount) | add) / $n) else 0 end
            ),
            avgMonthlyCredit: (
              ($credits | length) as $m
              | if $m > 0 then (($credits | map(.amount) | add) / $m) else 0 end
            ),
            avgBankBalance: (
              ($balances | length) as $b
              | if $b > 0 then (($balances | map(.balance) | add) / $b) else 0 end
            ),
            fileName: "bs"
          }

  # Step 8: Map to the Sheet Column name
  sheet-data:
    type: json
    task: TASK_RENAME_FIELDS
    input:
      json: ${merge-and-compute.output.results[0]}
      fields:
        - from: month
          to: Month
        - from: totalDebits
          to: Total Debits
        - from: totalCredits
          to: Total Credits
        - from: monthEndBalance
          to: Month end balance
        - from: avgMonthlyDebit
          to: Avg. monthly debit
        - from: avgMonthlyCredit
          to: Avg. monthly credit
        - from: avgBankBalance
          to: Avg. bank balance        
        - from: noOfDebitTransactions
          to: No. of debit transactions
        - from: noOfCreditTransactions
          to: No. of credit transactions
        - from: bank
          to: Bank    
        - from: fileName
          to: File Name    
        - from: currency
          to: Currency
      conflict-resolution: overwrite   

  # Step 9: Write into a sheet, with the matching column title 
  google-sheets:
    type: google-sheets
    task: TASK_INSERT_ROW
    # Replace the connection ID with the one you copied from the integration page > Google Sheets connection
    setup: ${connection.google-sheets-xiaofei-du-ins-e1v}
    input:
      shared-link: ${variable.sheet-shared-link}
      sheet-name: ${variable.sheet-name}
      row-value: ${sheet-data.output.json}

output:
  extracted_text:
    title: Extracted Statement Text
    value: ${statement-to-text.output.body}
    instill-ui-order: 1
  daily_balance_calculation:
    title: Daily Balance Calculation Reasoning
    value: ${calculate-daily-balances.output.texts[0]}
    instill-ui-order: 2
  merged_data_json:
    title: Merged Data JSON
    value: ${merge-and-compute.output.results[0]}
    instill-ui-order: 3
  sheet_data_json:
    title: Sheet Data JSON
    value: ${sheet-data.output.json}
    instill-ui-order: 4
  write-status:
    title: Google Sheets Write Row information
    value: ${google-sheets.output.row}
    instill-ui-order: 5
